version: '3.7'

services:
  
  nest_finder_api_service:
    container_name: nest_finder_api_service
    image: nestfinderapiservice
    build:
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV}
      args:
        APP_ENV: ${APP_ENV}
    environment:
      NODE_ENV: ${NODE_ENV}
      APP_ENV: ${APP_ENV}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: ${REDIS_HOST}
      DB_HOST: mysqldb
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_DATABASE: ${MYSQL_DATABASE}
    volumes:
        - ./:/usr/src/app:delegated
        - node_modules:/usr/src/app/node_modules
    command: sh -c 'if [ "$NODE_ENV" = "production" ]; then yarn start; else yarn dev; fi'
    user: "${UID}:${GID}" 
    depends_on:
      - redis
      - nest_finder_api_service_database
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  port_forwarding:
    container_name: nest_finder_api_service_port_forwarding
    image: nginx
    ports:
      - "${NGINX_PORT}:80"
      # - "443:443"  # Uncomment for HTTPS
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      # - ./nginx/ssl:/etc/nginx/ssl  # Uncomment for HTTPS certificates
    depends_on:
      - nest_finder_api_service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  redis:
    container_name: nest_finder_api_service_redis
    image: redis:alpine
    ports:
      - ${REDIS_PORT}
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  redis-commander:
    container_name: nest_finder_api_service_redis_commander
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: app-network:redis:${REDIS_PORT}
    ports:
      - "${REDIS_UI_PORT}:8081"
    depends_on:
      - redis
    networks:
      - app-network

  nest_finder_api_service_database:
    container_name: nest_finder_api_service_database
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${MYSQL_LOCAL_PORT}:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network
  
  phpmyadmin:
    container_name: nest_finder_api_service_phpmyadmin
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: nest_finder_api_service_database
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - nest_finder_api_service_database
    networks:
      - app-network


networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  db_data:
  node_modules:
  
